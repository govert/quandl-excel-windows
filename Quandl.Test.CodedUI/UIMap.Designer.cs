// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Quandl.Test.CodedUI
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertColumnSelected - Use 'AssertColumnSelectedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertColumnSelected()
        {
            #region Variable Declarations
            WpfListItem uISelectedColumnListItem = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIStepThreePaneCustom.UISelectedColumnsList.UISelectedColumnListItem;
            #endregion

            // Verify that the 'Name' property of 'Apple Inc. (AAPL) Stock Prices, Dividends and Spli...' list item equals ''
            Assert.AreEqual(this.AssertColumnSelectedExpectedValues.UISelectedColumnListItemName, uISelectedColumnListItem.Name);
        }
        
        /// <summary>
        /// AssertCorrectUDFSignature - Use 'AssertCorrectUDFSignatureExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertCorrectUDFSignature()
        {
            #region Variable Declarations
            WpfEdit uIUdfOutputEdit = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIUdfOutputEdit;
            WpfEdit uISelectedDataHolderTeEdit = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UISelectedDataHolderTeEdit;
            #endregion

            // Verify that the 'Text' property of 'udfOutput' text box equals '=QSERIES("WIKI/IBM")'
            Assert.AreEqual(this.AssertCorrectUDFSignatureExpectedValues.UIUdfOutputEditText, uIUdfOutputEdit.Text, "Generated QSERIES function not correct");

            // Verify that the 'Text' property of 'SelectedDataHolderTextBox' text box equals 'WIKI/IBM'
            Assert.AreEqual(this.AssertCorrectUDFSignatureExpectedValues.UISelectedDataHolderTeEditText, uISelectedDataHolderTeEdit.Text, "Time-series code not correct");
        }
        
        /// <summary>
        /// AssertInvalidDatabaseCodeMessage - Use 'AssertInvalidDatabaseCodeMessageExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertInvalidDatabaseCodeMessage()
        {
            #region Variable Declarations
            WpfText uIEODFBisnotavalidcodeText1 = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom1.UIEODFBisnotavalidcodeText.UIEODFBisnotavalidcodeText1;
            #endregion

            // Verify that the 'DisplayText' property of '"EOD/FB" is not a valid code.' label equals '"EOD/FB" is not a valid code.'
            Assert.AreEqual(this.AssertInvalidDatabaseCodeMessageExpectedValues.UIEODFBisnotavalidcodeText1DisplayText, uIEODFBisnotavalidcodeText1.DisplayText);
        }
        
        /// <summary>
        /// Ensure that the user is logged in
        /// </summary>
        public void AssertLoggedIn()
        {
            #region Variable Declarations
            WpfButton uIDatabaseButton = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIDatabaseButton;
            #endregion

            // Verify that the 'DisplayText' property of 'Database' button equals 'Database'
            Assert.AreEqual(this.AssertLoggedInExpectedValues.UIDatabaseButtonDisplayText, uIDatabaseButton.DisplayText, "You are not logged in!");
        }
        
        /// <summary>
        /// AssertNextButtonEnabled - Use 'AssertNextButtonEnabledExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertNextButtonEnabled()
        {
            #region Variable Declarations
            WpfButton uINextButton = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UINextButton;
            #endregion

            // Verify that the 'Enabled' property of 'next' button equals 'True'
            Assert.AreEqual(this.AssertNextButtonEnabledExpectedValues.UINextButtonEnabled, uINextButton.Enabled, "Next button not enabled");
        }
        
        /// <summary>
        /// AssertSelectedDatabaseCode - Use 'AssertSelectedDatabaseCodeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSelectedDatabaseCode()
        {
            #region Variable Declarations
            WpfEdit uIDatabaseCodeBoxEdit = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIDatabaseCodeBoxEdit;
            #endregion

            // Verify that the 'Text' property of 'DatabaseCodeBox' text box equals 'SIDC'
            Assert.AreEqual(this.AssertSelectedDatabaseCodeExpectedValues.UIDatabaseCodeBoxEditText, uIDatabaseCodeBoxEdit.Text);
        }
        
        /// <summary>
        /// AssertSelectedDatasetCode - Use 'AssertSelectedDatasetCodeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertSelectedDatasetCode()
        {
            #region Variable Declarations
            WpfEdit uISelectedDataHolderTeEdit = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UISelectedDataHolderTeEdit;
            #endregion

            // Verify that the 'Text' property of 'SelectedDataHolderTextBox' text box equals 'EOD/FB'
            Assert.AreEqual(this.AssertSelectedDatasetCodeExpectedValues.UISelectedDataHolderTeEditText, uISelectedDataHolderTeEdit.Text);
        }
        
        /// <summary>
        /// ClickInsert
        /// </summary>
        public void ClickInsert()
        {
            #region Variable Declarations
            WpfButton uIInsertButton = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIInsertButton;
            #endregion

            // Click 'insert' button
            Mouse.Click(uIInsertButton, new Point(6, 27));
        }
        
        /// <summary>
        /// InputDatabaseCode - Use 'InputDatabaseCodeParams' to pass parameters into this method.
        /// </summary>
        public void InputDatabaseCode()
        {
            #region Variable Declarations
            WpfEdit uIDatabaseCodeBoxEdit = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIDatabaseCodeBoxEdit;
            #endregion

            // Type 'EOD' in 'DatabaseCodeBox' text box
            uIDatabaseCodeBoxEdit.Text = this.InputDatabaseCodeParams.UIDatabaseCodeBoxEditText;
        }
        
        /// <summary>
        /// RecordedFilters - Use 'RecordedFiltersParams' to pass parameters into this method.
        /// </summary>
        public void RecordedFilters()
        {
            #region Variable Declarations
            WpfComboBox uITransformationFilterComboBox = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UITransformationFilterComboBox;
            WpfButton uINextButton = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UINextButton;
            #endregion

            // Select '{ Description = Row-on-row % change (rdiff), value = RDiff }' in 'TransformationFilter' combo box
            uITransformationFilterComboBox.SelectedItem = this.RecordedFiltersParams.UITransformationFilterComboBoxSelectedItem;

            // Click 'next' button
            Mouse.Click(uINextButton, new Point(60, 28));
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfComboBox uIComboBoxTransformatiComboBox = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIComboBoxTransformatiComboBox;
            #endregion

            // Select '{ Description = Row-on-row % change (rdiff), value = RDiff }' in 'ComboBoxTransformation' combo box
            uIComboBoxTransformatiComboBox.SelectedItem = this.RecordedMethod1Params.UIComboBoxTransformatiComboBoxSelectedItem;
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinButton uIGetDataButton = this.UIBook2ExcelWindow.UIItemWindow.UIItemToolBar.UIGetDataButton;
            #endregion

            // Click 'Get Data' button
            Mouse.Click(uIGetDataButton, new Point(57, 83));
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WpfCheckBox uIIncludeheadersCheckBox = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIIncludeheadersCheckBox;
            #endregion

            // Clear 'Include headers' check box
            uIIncludeheadersCheckBox.Checked = this.RecordedMethod3Params.UIIncludeheadersCheckBoxChecked;
        }
        
        /// <summary>
        /// RecordedMethod4 - Use 'RecordedMethod4Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WpfCheckBox uIIncludeheadersCheckBox = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIIncludeheadersCheckBox;
            #endregion

            // Select 'Include headers' check box
            uIIncludeheadersCheckBox.Checked = this.RecordedMethod4Params.UIIncludeheadersCheckBoxChecked;
        }
        
        /// <summary>
        /// SelectBrowseCategory
        /// </summary>
        public void SelectBrowseCategory()
        {
            #region Variable Declarations
            WpfTreeItem uIStockPricesEndofDayCTreeItem = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom1.UIBrowseDataTree.UIStockDataTreeItem.UIUnitedStatesTreeItem.UIStockPricesEndofDayCTreeItem;
            #endregion

            // Click 'Stock Data' -> 'United States' -> 'Stock Prices End of Day, Current and Historical' tree item
            Mouse.Click(uIStockPricesEndofDayCTreeItem, new Point(69, 6));
        }
        
        /// <summary>
        /// SelectBrowseFilter
        /// </summary>
        public void SelectBrowseFilter()
        {
            #region Variable Declarations
            WpfTabPage uIPremiumTabPage = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom1.UITabControlTabList.UIPremiumTabPage;
            #endregion

            // Click 'Premium' tab
            Mouse.Click(uIPremiumTabPage, new Point(29, 10));
        }
        
        /// <summary>
        /// SelectCategoryFromBrowse
        /// </summary>
        public void SelectCategoryFromBrowse()
        {
            #region Variable Declarations
            WpfTreeItem uIStockPricesEndofDayCTreeItem = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom1.UIBrowseDataTree.UIStockDataTreeItem.UIUnitedStatesTreeItem.UIStockPricesEndofDayCTreeItem;
            WpfTabPage uIAllTabPage = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom1.UITabControlTabList.UIAllTabPage;
            #endregion

            // Click 'Stock Data' -> 'United States' -> 'Stock Prices End of Day, Current and Historical' tree item
            Mouse.Click(uIStockPricesEndofDayCTreeItem, new Point(44, 10));

            // Click 'All' tab
            Mouse.Click(uIAllTabPage, new Point(17, 13));
        }
        
        /// <summary>
        /// SelectDatabaseFromTree - Use 'SelectDatabaseFromTreeParams' to pass parameters into this method.
        /// </summary>
        public void SelectDatabaseFromTree()
        {
            #region Variable Declarations
            WpfTreeItem uIFuturesDataTreeItem = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom1.UIBrowseDataTree.UIFuturesDataTreeItem;
            WpfTreeItem uIStockDataTreeItem = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom1.UIBrowseDataTree.UIStockDataTreeItem;
            WpfTreeItem uIStockPricesEndofDayCTreeItem = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom1.UIBrowseDataTree.UIStockDataTreeItem.UIUnitedStatesTreeItem.UIStockPricesEndofDayCTreeItem;
            WpfList uIAllDatabaseListList = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom1.UITabControlTabList.UIAllTabPage.UIAllDatabaseListList;
            #endregion

            // Click 'Futures Data' tree item
            Mouse.Click(uIFuturesDataTreeItem, new Point(50, 4));

            // Click 'Stock Data' tree item
            Mouse.Click(uIStockDataTreeItem, new Point(72, 29));

            // Click 'Stock Data' -> 'United States' -> 'Stock Prices End of Day, Current and Historical' tree item
            Mouse.Click(uIStockPricesEndofDayCTreeItem, new Point(68, 14));

            // Select 'Free WIKI Wiki EOD Stock Prices' in 'AllDatabaseList' list box
            uIAllDatabaseListList.SelectedItemsAsString = this.SelectDatabaseFromTreeParams.UIAllDatabaseListListSelectedItemsAsString;
        }
        
        /// <summary>
        /// SelectDatasetDatatable - Use 'SelectDatasetDatatableParams' to pass parameters into this method.
        /// </summary>
        public void SelectDatasetDatatable()
        {
            #region Variable Declarations
            WpfList uIDatasetsDatatablesLiList = this.UIQuandlFormulaBuilderWindow1.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIStepTwoPaneCustom.UIDatasetsDatatablesScPane.UIDatasetsDatatablesLiList;
            #endregion

            // Select 'Carbo Ceramics Inc. (CRR) Stock Prices\, Dividends and Splits' in 'DatasetsDatatablesListView' list box
            uIDatasetsDatatablesLiList.SelectedItemsAsString = this.SelectDatasetDatatableParams.UIDatasetsDatatablesLiListSelectedItemsAsString;
        }
        
        /// <summary>
        /// SelectIncludeHeaders - Use 'SelectIncludeHeadersParams' to pass parameters into this method.
        /// </summary>
        public void SelectIncludeHeaders()
        {
            #region Variable Declarations
            WpfCheckBox uIIncludeheadersCheckBox = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIIncludeheadersCheckBox;
            #endregion

            // Clear 'Include headers' check box
            uIIncludeheadersCheckBox.Checked = this.SelectIncludeHeadersParams.UIIncludeheadersCheckBoxChecked;
        }
        
        /// <summary>
        /// SelectTransformationFilter - Use 'SelectTransformationFilterParams' to pass parameters into this method.
        /// </summary>
        public void SelectTransformationFilter()
        {
            #region Variable Declarations
            WpfComboBox uIComboBoxFrequencyComboBox = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIComboBoxFrequencyComboBox;
            WpfComboBox uIComboBoxTransformatiComboBox = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIComboBoxTransformatiComboBox;
            #endregion

            // Select '{ Description = None (default), value = Default }' in 'ComboBoxFrequency' combo box
            uIComboBoxFrequencyComboBox.SelectedItem = this.SelectTransformationFilterParams.UIComboBoxFrequencyComboBoxSelectedItem;

            // Select '{ Description = Row-on-row % change (rdiff), value = RDiff }' in 'ComboBoxTransformation' combo box
            uIComboBoxTransformatiComboBox.SelectedItem = this.SelectTransformationFilterParams.UIComboBoxTransformatiComboBoxSelectedItem;
        }
        
        /// <summary>
        /// testMethod - Use 'testMethodParams' to pass parameters into this method.
        /// </summary>
        public void testMethod()
        {
            #region Variable Declarations
            WpfComboBox uIComboBoxFrequencyComboBox = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIComboBoxFrequencyComboBox;
            WpfCustom uIItemCustom = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIItemCustom;
            WpfComboBox uIComboBoxTransformatiComboBox = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIComboBoxTransformatiComboBox;
            #endregion

            // Click 'ComboBoxFrequency' combo box
            Mouse.Click(uIComboBoxFrequencyComboBox, new Point(103, 25));

            // Click custom control
            Mouse.Click(uIItemCustom, new Point(527, 229));

            // Click custom control
            Mouse.Click(uIItemCustom, new Point(527, 229));

            // Select '{ Description = Row-on-row % change (rdiff), value = RDiff }' in 'ComboBoxTransformation' combo box
            uIComboBoxTransformatiComboBox.SelectedItem = this.testMethodParams.UIComboBoxTransformatiComboBoxSelectedItem;
        }
        
        /// <summary>
        /// EnterTickerDatatableFilters - Use 'EnterTickerDatatableFiltersParams' to pass parameters into this method.
        /// </summary>
        public void EnterTickerDatatableFilters()
        {
            #region Variable Declarations
            WpfText uIEnterinthetickerthatText = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIEnterinthetickerthatText;
            WpfEdit uIStringFilterInputEdit = this.UIQuandlFormulaBuilderWindow.UIWpfElementHostWindow.UIWpfElementHostClient.UIItemPane.UIItemCustom.UIQuandlExcelAddincompPane.UIStringFilterInputEdit;
            #endregion

            // Click 'Enter in the ticker that you would like the data f...' label
            Mouse.Click(uIEnterinthetickerthatText, new Point(166, 54));

            // Type 'm_ticker' in 'StringFilterInput' text box
            uIStringFilterInputEdit.Text = this.EnterTickerDatatableFiltersParams.UIStringFilterInputEditText;
        }
        
        #region Properties
        public virtual AssertColumnSelectedExpectedValues AssertColumnSelectedExpectedValues
        {
            get
            {
                if ((this.mAssertColumnSelectedExpectedValues == null))
                {
                    this.mAssertColumnSelectedExpectedValues = new AssertColumnSelectedExpectedValues();
                }
                return this.mAssertColumnSelectedExpectedValues;
            }
        }
        
        public virtual AssertCorrectUDFSignatureExpectedValues AssertCorrectUDFSignatureExpectedValues
        {
            get
            {
                if ((this.mAssertCorrectUDFSignatureExpectedValues == null))
                {
                    this.mAssertCorrectUDFSignatureExpectedValues = new AssertCorrectUDFSignatureExpectedValues();
                }
                return this.mAssertCorrectUDFSignatureExpectedValues;
            }
        }
        
        public virtual AssertInvalidDatabaseCodeMessageExpectedValues AssertInvalidDatabaseCodeMessageExpectedValues
        {
            get
            {
                if ((this.mAssertInvalidDatabaseCodeMessageExpectedValues == null))
                {
                    this.mAssertInvalidDatabaseCodeMessageExpectedValues = new AssertInvalidDatabaseCodeMessageExpectedValues();
                }
                return this.mAssertInvalidDatabaseCodeMessageExpectedValues;
            }
        }
        
        public virtual AssertLoggedInExpectedValues AssertLoggedInExpectedValues
        {
            get
            {
                if ((this.mAssertLoggedInExpectedValues == null))
                {
                    this.mAssertLoggedInExpectedValues = new AssertLoggedInExpectedValues();
                }
                return this.mAssertLoggedInExpectedValues;
            }
        }
        
        public virtual AssertNextButtonEnabledExpectedValues AssertNextButtonEnabledExpectedValues
        {
            get
            {
                if ((this.mAssertNextButtonEnabledExpectedValues == null))
                {
                    this.mAssertNextButtonEnabledExpectedValues = new AssertNextButtonEnabledExpectedValues();
                }
                return this.mAssertNextButtonEnabledExpectedValues;
            }
        }
        
        public virtual AssertSelectedDatabaseCodeExpectedValues AssertSelectedDatabaseCodeExpectedValues
        {
            get
            {
                if ((this.mAssertSelectedDatabaseCodeExpectedValues == null))
                {
                    this.mAssertSelectedDatabaseCodeExpectedValues = new AssertSelectedDatabaseCodeExpectedValues();
                }
                return this.mAssertSelectedDatabaseCodeExpectedValues;
            }
        }
        
        public virtual AssertSelectedDatasetCodeExpectedValues AssertSelectedDatasetCodeExpectedValues
        {
            get
            {
                if ((this.mAssertSelectedDatasetCodeExpectedValues == null))
                {
                    this.mAssertSelectedDatasetCodeExpectedValues = new AssertSelectedDatasetCodeExpectedValues();
                }
                return this.mAssertSelectedDatasetCodeExpectedValues;
            }
        }
        
        public virtual InputDatabaseCodeParams InputDatabaseCodeParams
        {
            get
            {
                if ((this.mInputDatabaseCodeParams == null))
                {
                    this.mInputDatabaseCodeParams = new InputDatabaseCodeParams();
                }
                return this.mInputDatabaseCodeParams;
            }
        }
        
        public virtual RecordedFiltersParams RecordedFiltersParams
        {
            get
            {
                if ((this.mRecordedFiltersParams == null))
                {
                    this.mRecordedFiltersParams = new RecordedFiltersParams();
                }
                return this.mRecordedFiltersParams;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public virtual SelectDatabaseFromTreeParams SelectDatabaseFromTreeParams
        {
            get
            {
                if ((this.mSelectDatabaseFromTreeParams == null))
                {
                    this.mSelectDatabaseFromTreeParams = new SelectDatabaseFromTreeParams();
                }
                return this.mSelectDatabaseFromTreeParams;
            }
        }
        
        public virtual SelectDatasetDatatableParams SelectDatasetDatatableParams
        {
            get
            {
                if ((this.mSelectDatasetDatatableParams == null))
                {
                    this.mSelectDatasetDatatableParams = new SelectDatasetDatatableParams();
                }
                return this.mSelectDatasetDatatableParams;
            }
        }
        
        public virtual SelectIncludeHeadersParams SelectIncludeHeadersParams
        {
            get
            {
                if ((this.mSelectIncludeHeadersParams == null))
                {
                    this.mSelectIncludeHeadersParams = new SelectIncludeHeadersParams();
                }
                return this.mSelectIncludeHeadersParams;
            }
        }
        
        public virtual SelectTransformationFilterParams SelectTransformationFilterParams
        {
            get
            {
                if ((this.mSelectTransformationFilterParams == null))
                {
                    this.mSelectTransformationFilterParams = new SelectTransformationFilterParams();
                }
                return this.mSelectTransformationFilterParams;
            }
        }
        
        public virtual testMethodParams testMethodParams
        {
            get
            {
                if ((this.mtestMethodParams == null))
                {
                    this.mtestMethodParams = new testMethodParams();
                }
                return this.mtestMethodParams;
            }
        }
        
        public virtual EnterTickerDatatableFiltersParams EnterTickerDatatableFiltersParams
        {
            get
            {
                if ((this.mEnterTickerDatatableFiltersParams == null))
                {
                    this.mEnterTickerDatatableFiltersParams = new EnterTickerDatatableFiltersParams();
                }
                return this.mEnterTickerDatatableFiltersParams;
            }
        }
        
        public UIExcelWindow UIExcelWindow
        {
            get
            {
                if ((this.mUIExcelWindow == null))
                {
                    this.mUIExcelWindow = new UIExcelWindow();
                }
                return this.mUIExcelWindow;
            }
        }
        
        public UIUntitledNotepadWindow UIUntitledNotepadWindow
        {
            get
            {
                if ((this.mUIUntitledNotepadWindow == null))
                {
                    this.mUIUntitledNotepadWindow = new UIUntitledNotepadWindow();
                }
                return this.mUIUntitledNotepadWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIUserPromotedNotificaWindow UIUserPromotedNotificaWindow
        {
            get
            {
                if ((this.mUIUserPromotedNotificaWindow == null))
                {
                    this.mUIUserPromotedNotificaWindow = new UIUserPromotedNotificaWindow();
                }
                return this.mUIUserPromotedNotificaWindow;
            }
        }
        
        public UISearchthewebandWindoWindow UISearchthewebandWindoWindow
        {
            get
            {
                if ((this.mUISearchthewebandWindoWindow == null))
                {
                    this.mUISearchthewebandWindoWindow = new UISearchthewebandWindoWindow();
                }
                return this.mUISearchthewebandWindoWindow;
            }
        }
        
        public UIQuandlFormulaBuilderWindow UIQuandlFormulaBuilderWindow
        {
            get
            {
                if ((this.mUIQuandlFormulaBuilderWindow == null))
                {
                    this.mUIQuandlFormulaBuilderWindow = new UIQuandlFormulaBuilderWindow();
                }
                return this.mUIQuandlFormulaBuilderWindow;
            }
        }
        
        public UIQuandlFormulaBuilderWindow1 UIQuandlFormulaBuilderWindow1
        {
            get
            {
                if ((this.mUIQuandlFormulaBuilderWindow1 == null))
                {
                    this.mUIQuandlFormulaBuilderWindow1 = new UIQuandlFormulaBuilderWindow1();
                }
                return this.mUIQuandlFormulaBuilderWindow1;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11();
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIBook2ExcelWindow UIBook2ExcelWindow
        {
            get
            {
                if ((this.mUIBook2ExcelWindow == null))
                {
                    this.mUIBook2ExcelWindow = new UIBook2ExcelWindow();
                }
                return this.mUIBook2ExcelWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertColumnSelectedExpectedValues mAssertColumnSelectedExpectedValues;
        
        private AssertCorrectUDFSignatureExpectedValues mAssertCorrectUDFSignatureExpectedValues;
        
        private AssertInvalidDatabaseCodeMessageExpectedValues mAssertInvalidDatabaseCodeMessageExpectedValues;
        
        private AssertLoggedInExpectedValues mAssertLoggedInExpectedValues;
        
        private AssertNextButtonEnabledExpectedValues mAssertNextButtonEnabledExpectedValues;
        
        private AssertSelectedDatabaseCodeExpectedValues mAssertSelectedDatabaseCodeExpectedValues;
        
        private AssertSelectedDatasetCodeExpectedValues mAssertSelectedDatasetCodeExpectedValues;
        
        private InputDatabaseCodeParams mInputDatabaseCodeParams;
        
        private RecordedFiltersParams mRecordedFiltersParams;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private SelectDatabaseFromTreeParams mSelectDatabaseFromTreeParams;
        
        private SelectDatasetDatatableParams mSelectDatasetDatatableParams;
        
        private SelectIncludeHeadersParams mSelectIncludeHeadersParams;
        
        private SelectTransformationFilterParams mSelectTransformationFilterParams;
        
        private testMethodParams mtestMethodParams;
        
        private EnterTickerDatatableFiltersParams mEnterTickerDatatableFiltersParams;
        
        private UIExcelWindow mUIExcelWindow;
        
        private UIUntitledNotepadWindow mUIUntitledNotepadWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIUserPromotedNotificaWindow mUIUserPromotedNotificaWindow;
        
        private UISearchthewebandWindoWindow mUISearchthewebandWindoWindow;
        
        private UIQuandlFormulaBuilderWindow mUIQuandlFormulaBuilderWindow;
        
        private UIQuandlFormulaBuilderWindow1 mUIQuandlFormulaBuilderWindow1;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIBook2ExcelWindow mUIBook2ExcelWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertColumnSelected'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertColumnSelectedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Apple Inc. (AAPL) Stock Prices, Dividends and Spli...' list item equals ''
        /// </summary>
        public string UISelectedColumnListItemName = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertCorrectUDFSignature'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertCorrectUDFSignatureExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'udfOutput' text box equals '=QSERIES("WIKI/IBM")'
        /// </summary>
        public string UIUdfOutputEditText = "=QSERIES(\"WIKI/IBM\")";
        
        /// <summary>
        /// Verify that the 'Text' property of 'SelectedDataHolderTextBox' text box equals 'WIKI/IBM'
        /// </summary>
        public string UISelectedDataHolderTeEditText = "WIKI/IBM";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertInvalidDatabaseCodeMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertInvalidDatabaseCodeMessageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of '"EOD/FB" is not a valid code.' label equals '"EOD/FB" is not a valid code.'
        /// </summary>
        public string UIEODFBisnotavalidcodeText1DisplayText = "\"EOD/FB\" is not a valid code.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertLoggedIn'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertLoggedInExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Database' button equals 'Database'
        /// </summary>
        public string UIDatabaseButtonDisplayText = "Database";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertNextButtonEnabled'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertNextButtonEnabledExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'next' button equals 'True'
        /// </summary>
        public bool UINextButtonEnabled = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSelectedDatabaseCode'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSelectedDatabaseCodeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'DatabaseCodeBox' text box equals 'SIDC'
        /// </summary>
        public string UIDatabaseCodeBoxEditText = "SIDC";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertSelectedDatasetCode'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertSelectedDatasetCodeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'SelectedDataHolderTextBox' text box equals 'EOD/FB'
        /// </summary>
        public string UISelectedDataHolderTeEditText = "EOD/FB";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InputDatabaseCode'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InputDatabaseCodeParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'EOD' in 'DatabaseCodeBox' text box
        /// </summary>
        public string UIDatabaseCodeBoxEditText = "EOD";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedFilters'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedFiltersParams
    {
        
        #region Fields
        /// <summary>
        /// Select '{ Description = Row-on-row % change (rdiff), value = RDiff }' in 'TransformationFilter' combo box
        /// </summary>
        public string UITransformationFilterComboBoxSelectedItem = "{ Description = Row-on-row % change (rdiff), value = RDiff }";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Select '{ Description = Row-on-row % change (rdiff), value = RDiff }' in 'ComboBoxTransformation' combo box
        /// </summary>
        public string UIComboBoxTransformatiComboBoxSelectedItem = "{ Description = Row-on-row % change (rdiff), value = RDiff }";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Include headers' check box
        /// </summary>
        public bool UIIncludeheadersCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Include headers' check box
        /// </summary>
        public bool UIIncludeheadersCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectDatabaseFromTree'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectDatabaseFromTreeParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Free WIKI Wiki EOD Stock Prices' in 'AllDatabaseList' list box
        /// </summary>
        public string UIAllDatabaseListListSelectedItemsAsString = "Free WIKI Wiki EOD Stock Prices";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectDatasetDatatable'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectDatasetDatatableParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Carbo Ceramics Inc. (CRR) Stock Prices\, Dividends and Splits' in 'DatasetsDatatablesListView' list box
        /// </summary>
        public string UIDatasetsDatatablesLiListSelectedItemsAsString = "Carbo Ceramics Inc. (CRR) Stock Prices\\, Dividends and Splits";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectIncludeHeaders'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectIncludeHeadersParams
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Include headers' check box
        /// </summary>
        public bool UIIncludeheadersCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SelectTransformationFilter'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SelectTransformationFilterParams
    {
        
        #region Fields
        /// <summary>
        /// Select '{ Description = None (default), value = Default }' in 'ComboBoxFrequency' combo box
        /// </summary>
        public string UIComboBoxFrequencyComboBoxSelectedItem = "{ Description = None (default), value = Default }";
        
        /// <summary>
        /// Select '{ Description = Row-on-row % change (rdiff), value = RDiff }' in 'ComboBoxTransformation' combo box
        /// </summary>
        public string UIComboBoxTransformatiComboBoxSelectedItem = "{ Description = Row-on-row % change (rdiff), value = RDiff }";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'testMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class testMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Select '{ Description = Row-on-row % change (rdiff), value = RDiff }' in 'ComboBoxTransformation' combo box
        /// </summary>
        public string UIComboBoxTransformatiComboBoxSelectedItem = "{ Description = Row-on-row % change (rdiff), value = RDiff }";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterTickerDatatableFilters'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class EnterTickerDatatableFiltersParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'm_ticker' in 'StringFilterInput' text box
        /// </summary>
        public string UIStringFilterInputEditText = "m_ticker";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIExcelWindow : WinWindow
    {
        
        public UIExcelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Excel";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "XLMAIN";
            this.WindowTitles.Add("Excel");
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public UIFeaturedList UIFeaturedList
        {
            get
            {
                if ((this.mUIFeaturedList == null))
                {
                    this.mUIFeaturedList = new UIFeaturedList(this);
                }
                return this.mUIFeaturedList;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIFeaturedList mUIFeaturedList;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFeaturedList : WinList
    {
        
        public UIFeaturedList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Featured";
            this.WindowTitles.Add("Excel");
            #endregion
        }
        
        #region Properties
        public WinListItem UIBlankworkbookListItem
        {
            get
            {
                if ((this.mUIBlankworkbookListItem == null))
                {
                    this.mUIBlankworkbookListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUIBlankworkbookListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Blank workbook";
                    this.mUIBlankworkbookListItem.WindowTitles.Add("Excel");
                    #endregion
                }
                return this.mUIBlankworkbookListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIBlankworkbookListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Ribbon";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NetUIHWND";
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public UIRibbonClient UIRibbonClient
        {
            get
            {
                if ((this.mUIRibbonClient == null))
                {
                    this.mUIRibbonClient = new UIRibbonClient(this);
                }
                return this.mUIRibbonClient;
            }
        }
        
        public UIDataToolBar UIDataToolBar
        {
            get
            {
                if ((this.mUIDataToolBar == null))
                {
                    this.mUIDataToolBar = new UIDataToolBar(this);
                }
                return this.mUIDataToolBar;
            }
        }
        
        public UIRibbonPropertyPage UIRibbonPropertyPage
        {
            get
            {
                if ((this.mUIRibbonPropertyPage == null))
                {
                    this.mUIRibbonPropertyPage = new UIRibbonPropertyPage(this);
                }
                return this.mUIRibbonPropertyPage;
            }
        }
        
        public UIRibbonTabsTabList UIRibbonTabsTabList
        {
            get
            {
                if ((this.mUIRibbonTabsTabList == null))
                {
                    this.mUIRibbonTabsTabList = new UIRibbonTabsTabList(this);
                }
                return this.mUIRibbonTabsTabList;
            }
        }
        #endregion
        
        #region Fields
        private UIRibbonClient mUIRibbonClient;
        
        private UIDataToolBar mUIDataToolBar;
        
        private UIRibbonPropertyPage mUIRibbonPropertyPage;
        
        private UIRibbonTabsTabList mUIRibbonTabsTabList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRibbonClient : WinClient
    {
        
        public UIRibbonClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public WinTabPage UIQuandlTabPage
        {
            get
            {
                if ((this.mUIQuandlTabPage == null))
                {
                    this.mUIQuandlTabPage = new WinTabPage(this);
                    #region Search Criteria
                    this.mUIQuandlTabPage.SearchProperties[WinTabPage.PropertyNames.Name] = "Data Link";
                    this.mUIQuandlTabPage.WindowTitles.Add("Book1 - Excel");
                    #endregion
                }
                return this.mUIQuandlTabPage;
            }
        }
        #endregion
        
        #region Fields
        private WinTabPage mUIQuandlTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDataToolBar : WinToolBar
    {
        
        public UIDataToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Data";
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public WinButton UIGetDataButton
        {
            get
            {
                if ((this.mUIGetDataButton == null))
                {
                    this.mUIGetDataButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIGetDataButton.SearchProperties[WinButton.PropertyNames.Name] = "Get Data";
                    this.mUIGetDataButton.WindowTitles.Add("Book1 - Excel");
                    #endregion
                }
                return this.mUIGetDataButton;
            }
        }
        
        public WinButton UIDownloadButton
        {
            get
            {
                if ((this.mUIDownloadButton == null))
                {
                    this.mUIDownloadButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIDownloadButton.SearchProperties[WinButton.PropertyNames.Name] = "Download";
                    this.mUIDownloadButton.WindowTitles.Add("Book1 - Excel");
                    #endregion
                }
                return this.mUIDownloadButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIGetDataButton;
        
        private WinButton mUIDownloadButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRibbonPropertyPage : WinControl
    {
        
        public UIRibbonPropertyPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Ribbon";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "PropertyPage";
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIItemTitleBar.WindowTitles.Add("Book1 - Excel");
                    #endregion
                }
                return this.mUIItemTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIItemTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIRibbonTabsTabList : WinTabList
    {
        
        public UIRibbonTabsTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTabList.PropertyNames.Name] = "Ribbon Tabs";
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public WinClient UIRibbonClient
        {
            get
            {
                if ((this.mUIRibbonClient == null))
                {
                    this.mUIRibbonClient = new WinClient(this);
                    #region Search Criteria
                    this.mUIRibbonClient.WindowTitles.Add("Book1 - Excel");
                    #endregion
                }
                return this.mUIRibbonClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIRibbonClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "XLDESK";
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public UIBook1ExcelClient UIBook1ExcelClient
        {
            get
            {
                if ((this.mUIBook1ExcelClient == null))
                {
                    this.mUIBook1ExcelClient = new UIBook1ExcelClient(this);
                }
                return this.mUIBook1ExcelClient;
            }
        }
        #endregion
        
        #region Fields
        private UIBook1ExcelClient mUIBook1ExcelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBook1ExcelClient : WinClient
    {
        
        public UIBook1ExcelClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Book1 - Excel");
            #endregion
        }
        
        #region Properties
        public WinClient UIBook1Client
        {
            get
            {
                if ((this.mUIBook1Client == null))
                {
                    this.mUIBook1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUIBook1Client.SearchProperties[WinControl.PropertyNames.Name] = "Book1";
                    this.mUIBook1Client.WindowTitles.Add("Book1 - Excel");
                    #endregion
                }
                return this.mUIBook1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIBook1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUntitledNotepadWindow : WinWindow
    {
        
        public UIUntitledNotepadWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Untitled - Notepad";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Notepad";
            this.WindowTitles.Add("Untitled - Notepad");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "15";
            this.WindowTitles.Add("Untitled - Notepad");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Untitled - Notepad");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = " ";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MsoWorkPane";
            this.WindowTitles.Add(" ");
            #endregion
        }
        
        #region Properties
        public UIWpfElementHostWindow UIWpfElementHostWindow
        {
            get
            {
                if ((this.mUIWpfElementHostWindow == null))
                {
                    this.mUIWpfElementHostWindow = new UIWpfElementHostWindow(this);
                }
                return this.mUIWpfElementHostWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIWpfElementHostWindow mUIWpfElementHostWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfElementHostWindow : WinWindow
    {
        
        public UIWpfElementHostWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "wpfElementHost";
            this.WindowTitles.Add(" ");
            #endregion
        }
        
        #region Properties
        public UIWpfElementHostClient UIWpfElementHostClient
        {
            get
            {
                if ((this.mUIWpfElementHostClient == null))
                {
                    this.mUIWpfElementHostClient = new UIWpfElementHostClient(this);
                }
                return this.mUIWpfElementHostClient;
            }
        }
        #endregion
        
        #region Fields
        private UIWpfElementHostClient mUIWpfElementHostClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfElementHostClient : WinClient
    {
        
        public UIWpfElementHostClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add(" ");
            #endregion
        }
        
        #region Properties
        public UIItemPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane(this);
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private UIItemPane mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemPane : WpfPane
    {
        
        public UIItemPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add(" ");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WizardGuide";
            this.WindowTitles.Add(" ");
            #endregion
        }
        
        #region Properties
        public UIQuandlExcelAddincompPane UIQuandlExcelAddincompPane
        {
            get
            {
                if ((this.mUIQuandlExcelAddincompPane == null))
                {
                    this.mUIQuandlExcelAddincompPane = new UIQuandlExcelAddincompPane(this);
                }
                return this.mUIQuandlExcelAddincompPane;
            }
        }
        #endregion
        
        #region Fields
        private UIQuandlExcelAddincompPane mUIQuandlExcelAddincompPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlExcelAddincompPane : WpfPane
    {
        
        public UIQuandlExcelAddincompPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "stepFrame";
            this.WindowTitles.Add(" ");
            #endregion
        }
        
        #region Properties
        public WpfCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Login";
                    this.mUIItemCustom.WindowTitles.Add(" ");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        
        public WpfEdit UIApiKeyEdit
        {
            get
            {
                if ((this.mUIApiKeyEdit == null))
                {
                    this.mUIApiKeyEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIApiKeyEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "apiKey";
                    this.mUIApiKeyEdit.WindowTitles.Add(" ");
                    #endregion
                }
                return this.mUIApiKeyEdit;
            }
        }
        
        public WpfEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "password";
                    this.mUIPasswordEdit.WindowTitles.Add(" ");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mUIItemCustom;
        
        private WpfEdit mUIApiKeyEdit;
        
        private WpfEdit mUIPasswordEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUserPromotedNotificaWindow : WinWindow
    {
        
        public UIUserPromotedNotificaWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "User Promoted Notification Area";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "ToolbarWindow32";
            this.WindowTitles.Add("User Promoted Notification Area");
            #endregion
        }
        
        #region Properties
        public UIUserPromotedNotificaToolBar UIUserPromotedNotificaToolBar
        {
            get
            {
                if ((this.mUIUserPromotedNotificaToolBar == null))
                {
                    this.mUIUserPromotedNotificaToolBar = new UIUserPromotedNotificaToolBar(this);
                }
                return this.mUIUserPromotedNotificaToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIUserPromotedNotificaToolBar mUIUserPromotedNotificaToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUserPromotedNotificaToolBar : WinToolBar
    {
        
        public UIUserPromotedNotificaToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "User Promoted Notification Area";
            this.WindowTitles.Add("User Promoted Notification Area");
            #endregion
        }
        
        #region Properties
        public WinButton UISpeakers67Button
        {
            get
            {
                if ((this.mUISpeakers67Button == null))
                {
                    this.mUISpeakers67Button = new WinButton(this);
                    #region Search Criteria
                    this.mUISpeakers67Button.SearchProperties[WinButton.PropertyNames.Name] = "Speakers: 67%";
                    this.mUISpeakers67Button.WindowTitles.Add("User Promoted Notification Area");
                    #endregion
                }
                return this.mUISpeakers67Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISpeakers67Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISearchthewebandWindoWindow : WinWindow
    {
        
        public UISearchthewebandWindoWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Search the web and Windows";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("Search the web and Windows");
            #endregion
        }
        
        #region Properties
        public WinButton UISearchthewebandWindoButton
        {
            get
            {
                if ((this.mUISearchthewebandWindoButton == null))
                {
                    this.mUISearchthewebandWindoButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISearchthewebandWindoButton.SearchProperties[WinButton.PropertyNames.Name] = "Search the web and Windows";
                    this.mUISearchthewebandWindoButton.WindowTitles.Add("Search the web and Windows");
                    #endregion
                }
                return this.mUISearchthewebandWindoButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISearchthewebandWindoButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlFormulaBuilderWindow : WinWindow
    {
        
        public UIQuandlFormulaBuilderWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Data Link Formula Builder";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MsoWorkPane";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIWpfElementHostWindow1 UIWpfElementHostWindow
        {
            get
            {
                if ((this.mUIWpfElementHostWindow == null))
                {
                    this.mUIWpfElementHostWindow = new UIWpfElementHostWindow1(this);
                }
                return this.mUIWpfElementHostWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIWpfElementHostWindow1 mUIWpfElementHostWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfElementHostWindow1 : WinWindow
    {
        
        public UIWpfElementHostWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "WpfElementHost";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIWpfElementHostClient1 UIWpfElementHostClient
        {
            get
            {
                if ((this.mUIWpfElementHostClient == null))
                {
                    this.mUIWpfElementHostClient = new UIWpfElementHostClient1(this);
                }
                return this.mUIWpfElementHostClient;
            }
        }
        #endregion
        
        #region Fields
        private UIWpfElementHostClient1 mUIWpfElementHostClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfElementHostClient1 : WinClient
    {
        
        public UIWpfElementHostClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIItemPane1 UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane1(this);
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private UIItemPane1 mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemPane1 : WpfPane
    {
        
        public UIItemPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIItemCustom1 UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom1(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public UIItemCustom11 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom11(this);
                }
                return this.mUIItemCustom1;
            }
        }
        
        public UIItemCustom2 UIItemCustom2
        {
            get
            {
                if ((this.mUIItemCustom2 == null))
                {
                    this.mUIItemCustom2 = new UIItemCustom2(this);
                }
                return this.mUIItemCustom2;
            }
        }
        
        public UIItemCustom3 UIItemCustom3
        {
            get
            {
                if ((this.mUIItemCustom3 == null))
                {
                    this.mUIItemCustom3 = new UIItemCustom3(this);
                }
                return this.mUIItemCustom3;
            }
        }
        
        public UIItemCustom4 UIItemCustom4
        {
            get
            {
                if ((this.mUIItemCustom4 == null))
                {
                    this.mUIItemCustom4 = new UIItemCustom4(this);
                }
                return this.mUIItemCustom4;
            }
        }
        
        public UIItemCustom5 UIItemCustom5
        {
            get
            {
                if ((this.mUIItemCustom5 == null))
                {
                    this.mUIItemCustom5 = new UIItemCustom5(this);
                }
                return this.mUIItemCustom5;
            }
        }
        
        public UIItemCustom6 UIItemCustom6
        {
            get
            {
                if ((this.mUIItemCustom6 == null))
                {
                    this.mUIItemCustom6 = new UIItemCustom6(this);
                }
                return this.mUIItemCustom6;
            }
        }
        
        public UIStepTwoPaneCustom UIStepTwoPaneCustom
        {
            get
            {
                if ((this.mUIStepTwoPaneCustom == null))
                {
                    this.mUIStepTwoPaneCustom = new UIStepTwoPaneCustom(this);
                }
                return this.mUIStepTwoPaneCustom;
            }
        }
        
        public UIStepThreePaneCustom UIStepThreePaneCustom
        {
            get
            {
                if ((this.mUIStepThreePaneCustom == null))
                {
                    this.mUIStepThreePaneCustom = new UIStepThreePaneCustom(this);
                }
                return this.mUIStepThreePaneCustom;
            }
        }
        
        public UIQuandlExcelAddincompPane2 UIQuandlExcelAddincompPane
        {
            get
            {
                if ((this.mUIQuandlExcelAddincompPane == null))
                {
                    this.mUIQuandlExcelAddincompPane = new UIQuandlExcelAddincompPane2(this);
                }
                return this.mUIQuandlExcelAddincompPane;
            }
        }
        
        public UIItemCustom111 UIItemCustom11
        {
            get
            {
                if ((this.mUIItemCustom11 == null))
                {
                    this.mUIItemCustom11 = new UIItemCustom111(this);
                }
                return this.mUIItemCustom11;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom1 mUIItemCustom;
        
        private UIItemCustom11 mUIItemCustom1;
        
        private UIItemCustom2 mUIItemCustom2;
        
        private UIItemCustom3 mUIItemCustom3;
        
        private UIItemCustom4 mUIItemCustom4;
        
        private UIItemCustom5 mUIItemCustom5;
        
        private UIItemCustom6 mUIItemCustom6;
        
        private UIStepTwoPaneCustom mUIStepTwoPaneCustom;
        
        private UIStepThreePaneCustom mUIStepThreePaneCustom;
        
        private UIQuandlExcelAddincompPane2 mUIQuandlExcelAddincompPane;
        
        private UIItemCustom111 mUIItemCustom11;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom1 : WpfCustom
    {
        
        public UIItemCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WizardGuide";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIQuandlExcelAddincompPane1 UIQuandlExcelAddincompPane
        {
            get
            {
                if ((this.mUIQuandlExcelAddincompPane == null))
                {
                    this.mUIQuandlExcelAddincompPane = new UIQuandlExcelAddincompPane1(this);
                }
                return this.mUIQuandlExcelAddincompPane;
            }
        }
        
        public WpfButton UIDatabaseButton
        {
            get
            {
                if ((this.mUIDatabaseButton == null))
                {
                    this.mUIDatabaseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIDatabaseButton.SearchProperties[WpfButton.PropertyNames.Name] = "Database";
                    this.mUIDatabaseButton.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIDatabaseButton;
            }
        }
        
        public WpfButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "nextButton";
                    this.mUINextButton.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        
        public WpfEdit UIUdfOutputEdit
        {
            get
            {
                if ((this.mUIUdfOutputEdit == null))
                {
                    this.mUIUdfOutputEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIUdfOutputEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "udfOutput";
                    this.mUIUdfOutputEdit.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIUdfOutputEdit;
            }
        }
        
        public WpfButton UIInsertButton
        {
            get
            {
                if ((this.mUIInsertButton == null))
                {
                    this.mUIInsertButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIInsertButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "insertButton";
                    this.mUIInsertButton.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIInsertButton;
            }
        }
        #endregion
        
        #region Fields
        private UIQuandlExcelAddincompPane1 mUIQuandlExcelAddincompPane;
        
        private WpfButton mUIDatabaseButton;
        
        private WpfButton mUINextButton;
        
        private WpfEdit mUIUdfOutputEdit;
        
        private WpfButton mUIInsertButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlExcelAddincompPane1 : WpfPane
    {
        
        public UIQuandlExcelAddincompPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "stepFrame";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIEmailEdit
        {
            get
            {
                if ((this.mUIEmailEdit == null))
                {
                    this.mUIEmailEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIEmailEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "email";
                    this.mUIEmailEdit.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIEmailEdit;
            }
        }
        
        public WpfEdit UIPasswordEdit
        {
            get
            {
                if ((this.mUIPasswordEdit == null))
                {
                    this.mUIPasswordEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIPasswordEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "password";
                    this.mUIPasswordEdit.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIPasswordEdit;
            }
        }
        
        public WpfButton UILoginButton
        {
            get
            {
                if ((this.mUILoginButton == null))
                {
                    this.mUILoginButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILoginButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "loginButton";
                    this.mUILoginButton.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUILoginButton;
            }
        }
        
        public WpfEdit UIApiKeyEdit
        {
            get
            {
                if ((this.mUIApiKeyEdit == null))
                {
                    this.mUIApiKeyEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIApiKeyEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "apiKey";
                    this.mUIApiKeyEdit.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIApiKeyEdit;
            }
        }
        
        public WpfEdit UIDatabaseCodeBoxEdit
        {
            get
            {
                if ((this.mUIDatabaseCodeBoxEdit == null))
                {
                    this.mUIDatabaseCodeBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIDatabaseCodeBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DatabaseCodeBox";
                    this.mUIDatabaseCodeBoxEdit.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIDatabaseCodeBoxEdit;
            }
        }
        
        public WpfEdit UITxtFilterResultsEdit
        {
            get
            {
                if ((this.mUITxtFilterResultsEdit == null))
                {
                    this.mUITxtFilterResultsEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtFilterResultsEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtFilterResults";
                    this.mUITxtFilterResultsEdit.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUITxtFilterResultsEdit;
            }
        }
        
        public WpfList UILvDatasetsList
        {
            get
            {
                if ((this.mUILvDatasetsList == null))
                {
                    this.mUILvDatasetsList = new WpfList(this);
                    #region Search Criteria
                    this.mUILvDatasetsList.SearchProperties[WpfList.PropertyNames.AutomationId] = "lvDatasets";
                    this.mUILvDatasetsList.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUILvDatasetsList;
            }
        }
        
        public WpfEdit UISelectedDataHolderTeEdit
        {
            get
            {
                if ((this.mUISelectedDataHolderTeEdit == null))
                {
                    this.mUISelectedDataHolderTeEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUISelectedDataHolderTeEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "SelectedDataHolderTextBox";
                    this.mUISelectedDataHolderTeEdit.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUISelectedDataHolderTeEdit;
            }
        }
        
        public WpfComboBox UIComboBoxDateSelectioComboBox
        {
            get
            {
                if ((this.mUIComboBoxDateSelectioComboBox == null))
                {
                    this.mUIComboBoxDateSelectioComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIComboBoxDateSelectioComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "ComboBoxDateSelection";
                    this.mUIComboBoxDateSelectioComboBox.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIComboBoxDateSelectioComboBox;
            }
        }
        
        public WpfDatePicker UIDatePickerStartDatePicker
        {
            get
            {
                if ((this.mUIDatePickerStartDatePicker == null))
                {
                    this.mUIDatePickerStartDatePicker = new WpfDatePicker(this);
                    #region Search Criteria
                    this.mUIDatePickerStartDatePicker.SearchProperties[WpfDatePicker.PropertyNames.AutomationId] = "DatePickerStart";
                    this.mUIDatePickerStartDatePicker.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIDatePickerStartDatePicker;
            }
        }
        
        public WpfCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TimeSeriesFilters";
                    this.mUIItemCustom.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        
        public WpfText UIDataManipulationText
        {
            get
            {
                if ((this.mUIDataManipulationText == null))
                {
                    this.mUIDataManipulationText = new WpfText(this);
                    #region Search Criteria
                    this.mUIDataManipulationText.SearchProperties[WpfText.PropertyNames.Name] = "Data Manipulation";
                    this.mUIDataManipulationText.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIDataManipulationText;
            }
        }
        
        public WpfEdit UIAutoSelectTextBoxEdit
        {
            get
            {
                if ((this.mUIAutoSelectTextBoxEdit == null))
                {
                    this.mUIAutoSelectTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIAutoSelectTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "AutoSelectTextBox";
                    this.mUIAutoSelectTextBoxEdit.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIAutoSelectTextBoxEdit;
            }
        }
        
        public WpfComboBox UIComboBoxFrequencyComboBox
        {
            get
            {
                if ((this.mUIComboBoxFrequencyComboBox == null))
                {
                    this.mUIComboBoxFrequencyComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIComboBoxFrequencyComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "ComboBoxFrequency";
                    this.mUIComboBoxFrequencyComboBox.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIComboBoxFrequencyComboBox;
            }
        }
        
        public WpfComboBox UIComboBoxTransformatiComboBox
        {
            get
            {
                if ((this.mUIComboBoxTransformatiComboBox == null))
                {
                    this.mUIComboBoxTransformatiComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIComboBoxTransformatiComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "ComboBoxTransformation";
                    this.mUIComboBoxTransformatiComboBox.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIComboBoxTransformatiComboBox;
            }
        }
        
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnFirstPage";
                    this.mUIItemButton.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnPrevPage";
                    this.mUIItemButton1.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        
        public WpfButton UIItemButton2
        {
            get
            {
                if ((this.mUIItemButton2 == null))
                {
                    this.mUIItemButton2 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton2.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnNextPage";
                    this.mUIItemButton2.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIItemButton2;
            }
        }
        
        public WpfButton UIItemButton3
        {
            get
            {
                if ((this.mUIItemButton3 == null))
                {
                    this.mUIItemButton3 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton3.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnLastPage";
                    this.mUIItemButton3.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIItemButton3;
            }
        }
        
        public WpfComboBox UIDateRangeTypeFilterComboBox
        {
            get
            {
                if ((this.mUIDateRangeTypeFilterComboBox == null))
                {
                    this.mUIDateRangeTypeFilterComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIDateRangeTypeFilterComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "DateRangeTypeFilter";
                    this.mUIDateRangeTypeFilterComboBox.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIDateRangeTypeFilterComboBox;
            }
        }
        
        public WpfComboBox UIFrequencyFilterComboBox
        {
            get
            {
                if ((this.mUIFrequencyFilterComboBox == null))
                {
                    this.mUIFrequencyFilterComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIFrequencyFilterComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "FrequencyFilter";
                    this.mUIFrequencyFilterComboBox.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIFrequencyFilterComboBox;
            }
        }
        
        public WpfComboBox UITransformationFilterComboBox
        {
            get
            {
                if ((this.mUITransformationFilterComboBox == null))
                {
                    this.mUITransformationFilterComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUITransformationFilterComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "TransformationFilter";
                    this.mUITransformationFilterComboBox.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUITransformationFilterComboBox;
            }
        }
        
        public WpfComboBox UISortFilterComboBox
        {
            get
            {
                if ((this.mUISortFilterComboBox == null))
                {
                    this.mUISortFilterComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUISortFilterComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SortFilter";
                    this.mUISortFilterComboBox.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUISortFilterComboBox;
            }
        }
        
        public WpfCheckBox UIIncludeheadersCheckBox
        {
            get
            {
                if ((this.mUIIncludeheadersCheckBox == null))
                {
                    this.mUIIncludeheadersCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIIncludeheadersCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "IncludeHeaders";
                    this.mUIIncludeheadersCheckBox.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIIncludeheadersCheckBox;
            }
        }
        
        public WpfText UIEnterinthetickerthatText
        {
            get
            {
                if ((this.mUIEnterinthetickerthatText == null))
                {
                    this.mUIEnterinthetickerthatText = new WpfText(this);
                    #region Search Criteria
                    this.mUIEnterinthetickerthatText.SearchProperties[WpfText.PropertyNames.AutomationId] = "Filterlabel";
                    this.mUIEnterinthetickerthatText.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIEnterinthetickerthatText;
            }
        }
        
        public WpfEdit UIStringFilterInputEdit
        {
            get
            {
                if ((this.mUIStringFilterInputEdit == null))
                {
                    this.mUIStringFilterInputEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIStringFilterInputEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "StringFilterInput";
                    this.mUIStringFilterInputEdit.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIStringFilterInputEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIEmailEdit;
        
        private WpfEdit mUIPasswordEdit;
        
        private WpfButton mUILoginButton;
        
        private WpfEdit mUIApiKeyEdit;
        
        private WpfEdit mUIDatabaseCodeBoxEdit;
        
        private WpfEdit mUITxtFilterResultsEdit;
        
        private WpfList mUILvDatasetsList;
        
        private WpfEdit mUISelectedDataHolderTeEdit;
        
        private WpfComboBox mUIComboBoxDateSelectioComboBox;
        
        private WpfDatePicker mUIDatePickerStartDatePicker;
        
        private WpfCustom mUIItemCustom;
        
        private WpfText mUIDataManipulationText;
        
        private WpfEdit mUIAutoSelectTextBoxEdit;
        
        private WpfComboBox mUIComboBoxFrequencyComboBox;
        
        private WpfComboBox mUIComboBoxTransformatiComboBox;
        
        private WpfButton mUIItemButton;
        
        private WpfButton mUIItemButton1;
        
        private WpfButton mUIItemButton2;
        
        private WpfButton mUIItemButton3;
        
        private WpfComboBox mUIDateRangeTypeFilterComboBox;
        
        private WpfComboBox mUIFrequencyFilterComboBox;
        
        private WpfComboBox mUITransformationFilterComboBox;
        
        private WpfComboBox mUISortFilterComboBox;
        
        private WpfCheckBox mUIIncludeheadersCheckBox;
        
        private WpfText mUIEnterinthetickerthatText;
        
        private WpfEdit mUIStringFilterInputEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom11 : WpfCustom
    {
        
        public UIItemCustom11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DatabaseSelection";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIBrowseDataTree UIBrowseDataTree
        {
            get
            {
                if ((this.mUIBrowseDataTree == null))
                {
                    this.mUIBrowseDataTree = new UIBrowseDataTree(this);
                }
                return this.mUIBrowseDataTree;
            }
        }
        
        public UITabControlTabList UITabControlTabList
        {
            get
            {
                if ((this.mUITabControlTabList == null))
                {
                    this.mUITabControlTabList = new UITabControlTabList(this);
                }
                return this.mUITabControlTabList;
            }
        }
        
        public UIEODFBisnotavalidcodeText UIEODFBisnotavalidcodeText
        {
            get
            {
                if ((this.mUIEODFBisnotavalidcodeText == null))
                {
                    this.mUIEODFBisnotavalidcodeText = new UIEODFBisnotavalidcodeText(this);
                }
                return this.mUIEODFBisnotavalidcodeText;
            }
        }
        #endregion
        
        #region Fields
        private UIBrowseDataTree mUIBrowseDataTree;
        
        private UITabControlTabList mUITabControlTabList;
        
        private UIEODFBisnotavalidcodeText mUIEODFBisnotavalidcodeText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBrowseDataTree : WpfTree
    {
        
        public UIBrowseDataTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "BrowseData";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIItemTreeItem UIItemTreeItem
        {
            get
            {
                if ((this.mUIItemTreeItem == null))
                {
                    this.mUIItemTreeItem = new UIItemTreeItem(this);
                }
                return this.mUIItemTreeItem;
            }
        }
        
        public UIItemTreeItem11 UIItemTreeItem1
        {
            get
            {
                if ((this.mUIItemTreeItem1 == null))
                {
                    this.mUIItemTreeItem1 = new UIItemTreeItem11(this);
                }
                return this.mUIItemTreeItem1;
            }
        }
        
        public UIStockDataTreeItem UIStockDataTreeItem
        {
            get
            {
                if ((this.mUIStockDataTreeItem == null))
                {
                    this.mUIStockDataTreeItem = new UIStockDataTreeItem(this);
                }
                return this.mUIStockDataTreeItem;
            }
        }
        
        public WpfTreeItem UIFuturesDataTreeItem
        {
            get
            {
                if ((this.mUIFuturesDataTreeItem == null))
                {
                    this.mUIFuturesDataTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIFuturesDataTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Futures Data";
                    this.mUIFuturesDataTreeItem.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIFuturesDataTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTreeItem mUIItemTreeItem;
        
        private UIItemTreeItem11 mUIItemTreeItem1;
        
        private UIStockDataTreeItem mUIStockDataTreeItem;
        
        private WpfTreeItem mUIFuturesDataTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemTreeItem : WpfTreeItem
    {
        
        public UIItemTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIItemTreeItem1 UIItemTreeItem1
        {
            get
            {
                if ((this.mUIItemTreeItem1 == null))
                {
                    this.mUIItemTreeItem1 = new UIItemTreeItem1(this);
                }
                return this.mUIItemTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTreeItem1 mUIItemTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemTreeItem1 : WpfTreeItem
    {
        
        public UIItemTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem UIItemTreeItem
        {
            get
            {
                if ((this.mUIItemTreeItem == null))
                {
                    this.mUIItemTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIItemTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIItemTreeItem.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItemTreeItem.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIItemTreeItem;
            }
        }
        
        public WpfTreeItem UIItemTreeItem2
        {
            get
            {
                if ((this.mUIItemTreeItem2 == null))
                {
                    this.mUIItemTreeItem2 = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIItemTreeItem2.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
                    this.mUIItemTreeItem2.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIItemTreeItem2.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIItemTreeItem2;
            }
        }
        
        public WpfTreeItem UIItemTreeItem3
        {
            get
            {
                if ((this.mUIItemTreeItem3 == null))
                {
                    this.mUIItemTreeItem3 = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIItemTreeItem3.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "10";
                    this.mUIItemTreeItem3.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIItemTreeItem3.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIItemTreeItem3;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mUIItemTreeItem;
        
        private WpfTreeItem mUIItemTreeItem2;
        
        private WpfTreeItem mUIItemTreeItem3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemTreeItem11 : WpfTreeItem
    {
        
        public UIItemTreeItem11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIAgricultureTreeItem UIAgricultureTreeItem
        {
            get
            {
                if ((this.mUIAgricultureTreeItem == null))
                {
                    this.mUIAgricultureTreeItem = new UIAgricultureTreeItem(this);
                }
                return this.mUIAgricultureTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIAgricultureTreeItem mUIAgricultureTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAgricultureTreeItem : WpfTreeItem
    {
        
        public UIAgricultureTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Agriculture";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem UIAgricultureFuturesOpTreeItem
        {
            get
            {
                if ((this.mUIAgricultureFuturesOpTreeItem == null))
                {
                    this.mUIAgricultureFuturesOpTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIAgricultureFuturesOpTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Agriculture Futures Options";
                    this.mUIAgricultureFuturesOpTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAgricultureFuturesOpTreeItem.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIAgricultureFuturesOpTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mUIAgricultureFuturesOpTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIStockDataTreeItem : WpfTreeItem
    {
        
        public UIStockDataTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Stock Data";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIUnitedStatesTreeItem UIUnitedStatesTreeItem
        {
            get
            {
                if ((this.mUIUnitedStatesTreeItem == null))
                {
                    this.mUIUnitedStatesTreeItem = new UIUnitedStatesTreeItem(this);
                }
                return this.mUIUnitedStatesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUnitedStatesTreeItem mUIUnitedStatesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUnitedStatesTreeItem : WpfTreeItem
    {
        
        public UIUnitedStatesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "United States";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem UIStockPricesEndofDayCTreeItem
        {
            get
            {
                if ((this.mUIStockPricesEndofDayCTreeItem == null))
                {
                    this.mUIStockPricesEndofDayCTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIStockPricesEndofDayCTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Stock Prices End of Day, Current and Historical";
                    this.mUIStockPricesEndofDayCTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIStockPricesEndofDayCTreeItem.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIStockPricesEndofDayCTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mUIStockPricesEndofDayCTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITabControlTabList : WpfTabList
    {
        
        public UITabControlTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "TabControl";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIAllTabPage UIAllTabPage
        {
            get
            {
                if ((this.mUIAllTabPage == null))
                {
                    this.mUIAllTabPage = new UIAllTabPage(this);
                }
                return this.mUIAllTabPage;
            }
        }
        
        public WpfTabPage UIPremiumTabPage
        {
            get
            {
                if ((this.mUIPremiumTabPage == null))
                {
                    this.mUIPremiumTabPage = new WpfTabPage(this);
                    #region Search Criteria
                    this.mUIPremiumTabPage.SearchProperties[WpfTabPage.PropertyNames.Name] = "Premium";
                    this.mUIPremiumTabPage.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIPremiumTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UIAllTabPage mUIAllTabPage;
        
        private WpfTabPage mUIPremiumTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAllTabPage : WpfTabPage
    {
        
        public UIAllTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "All";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIAllDatabaseListList UIAllDatabaseListList
        {
            get
            {
                if ((this.mUIAllDatabaseListList == null))
                {
                    this.mUIAllDatabaseListList = new UIAllDatabaseListList(this);
                }
                return this.mUIAllDatabaseListList;
            }
        }
        #endregion
        
        #region Fields
        private UIAllDatabaseListList mUIAllDatabaseListList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAllDatabaseListList : WpfList
    {
        
        public UIAllDatabaseListList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "AllDatabaseList";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIQuandlSharedModelsBrListItem
        {
            get
            {
                if ((this.mUIQuandlSharedModelsBrListItem == null))
                {
                    this.mUIQuandlSharedModelsBrListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIQuandlSharedModelsBrListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Quandl.Shared.Models.Browse.ViewData";
                    this.mUIQuandlSharedModelsBrListItem.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIQuandlSharedModelsBrListItem;
            }
        }
        
        public WpfListItem UIPremiumZCPZacksCompaListItem
        {
            get
            {
                if ((this.mUIPremiumZCPZacksCompaListItem == null))
                {
                    this.mUIPremiumZCPZacksCompaListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIPremiumZCPZacksCompaListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Premium ZCP Zacks Company Profiles";
                    this.mUIPremiumZCPZacksCompaListItem.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIPremiumZCPZacksCompaListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIQuandlSharedModelsBrListItem;
        
        private WpfListItem mUIPremiumZCPZacksCompaListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEODFBisnotavalidcodeText : WpfText
    {
        
        public UIEODFBisnotavalidcodeText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorMessage";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfText UIEODFBisnotavalidcodeText1
        {
            get
            {
                if ((this.mUIEODFBisnotavalidcodeText1 == null))
                {
                    this.mUIEODFBisnotavalidcodeText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIEODFBisnotavalidcodeText1.SearchProperties[WpfText.PropertyNames.Name] = "\"EOD/FB\" is not a valid code.";
                    this.mUIEODFBisnotavalidcodeText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIEODFBisnotavalidcodeText1.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIEODFBisnotavalidcodeText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIEODFBisnotavalidcodeText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom2 : WpfCustom
    {
        
        public UIItemCustom2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ColumnSelection";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIAvailableColumnsTreeTree UIAvailableColumnsTreeTree
        {
            get
            {
                if ((this.mUIAvailableColumnsTreeTree == null))
                {
                    this.mUIAvailableColumnsTreeTree = new UIAvailableColumnsTreeTree(this);
                }
                return this.mUIAvailableColumnsTreeTree;
            }
        }
        #endregion
        
        #region Fields
        private UIAvailableColumnsTreeTree mUIAvailableColumnsTreeTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAvailableColumnsTreeTree : WpfTree
    {
        
        public UIAvailableColumnsTreeTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "AvailableColumnsTreeView";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIQuandlSharedModelsDaTreeItem UIQuandlSharedModelsDaTreeItem
        {
            get
            {
                if ((this.mUIQuandlSharedModelsDaTreeItem == null))
                {
                    this.mUIQuandlSharedModelsDaTreeItem = new UIQuandlSharedModelsDaTreeItem(this);
                }
                return this.mUIQuandlSharedModelsDaTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIQuandlSharedModelsDaTreeItem mUIQuandlSharedModelsDaTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlSharedModelsDaTreeItem : WpfTreeItem
    {
        
        public UIQuandlSharedModelsDaTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Quandl.Shared.Models.Dataset";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIQuandlSharedModelsDaTreeItem1 UIQuandlSharedModelsDaTreeItem1
        {
            get
            {
                if ((this.mUIQuandlSharedModelsDaTreeItem1 == null))
                {
                    this.mUIQuandlSharedModelsDaTreeItem1 = new UIQuandlSharedModelsDaTreeItem1(this);
                }
                return this.mUIQuandlSharedModelsDaTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private UIQuandlSharedModelsDaTreeItem1 mUIQuandlSharedModelsDaTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlSharedModelsDaTreeItem1 : WpfTreeItem
    {
        
        public UIQuandlSharedModelsDaTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Quandl.Shared.Models.DataColumn";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UIDateCheckBox
        {
            get
            {
                if ((this.mUIDateCheckBox == null))
                {
                    this.mUIDateCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIDateCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Date";
                    this.mUIDateCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDateCheckBox.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIDateCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUIDateCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom3 : WpfCustom
    {
        
        public UIItemCustom3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ColumnSelection";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIAvailableColumnsTreeTree1 UIAvailableColumnsTreeTree
        {
            get
            {
                if ((this.mUIAvailableColumnsTreeTree == null))
                {
                    this.mUIAvailableColumnsTreeTree = new UIAvailableColumnsTreeTree1(this);
                }
                return this.mUIAvailableColumnsTreeTree;
            }
        }
        #endregion
        
        #region Fields
        private UIAvailableColumnsTreeTree1 mUIAvailableColumnsTreeTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAvailableColumnsTreeTree1 : WpfTree
    {
        
        public UIAvailableColumnsTreeTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "AvailableColumnsTreeView";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIQuandlSharedModelsDaTreeItem2 UIQuandlSharedModelsDaTreeItem
        {
            get
            {
                if ((this.mUIQuandlSharedModelsDaTreeItem == null))
                {
                    this.mUIQuandlSharedModelsDaTreeItem = new UIQuandlSharedModelsDaTreeItem2(this);
                }
                return this.mUIQuandlSharedModelsDaTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIQuandlSharedModelsDaTreeItem2 mUIQuandlSharedModelsDaTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlSharedModelsDaTreeItem2 : WpfTreeItem
    {
        
        public UIQuandlSharedModelsDaTreeItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Quandl.Shared.Models.Dataset";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIQuandlSharedModelsDaTreeItem11 UIQuandlSharedModelsDaTreeItem1
        {
            get
            {
                if ((this.mUIQuandlSharedModelsDaTreeItem1 == null))
                {
                    this.mUIQuandlSharedModelsDaTreeItem1 = new UIQuandlSharedModelsDaTreeItem11(this);
                }
                return this.mUIQuandlSharedModelsDaTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private UIQuandlSharedModelsDaTreeItem11 mUIQuandlSharedModelsDaTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlSharedModelsDaTreeItem11 : WpfTreeItem
    {
        
        public UIQuandlSharedModelsDaTreeItem11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Quandl.Shared.Models.DataColumn";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UIOpenCheckBox
        {
            get
            {
                if ((this.mUIOpenCheckBox == null))
                {
                    this.mUIOpenCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIOpenCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Open";
                    this.mUIOpenCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenCheckBox.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIOpenCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUIOpenCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom4 : WpfCustom
    {
        
        public UIItemCustom4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ColumnSelection";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIAvailableColumnsTreeTree2 UIAvailableColumnsTreeTree
        {
            get
            {
                if ((this.mUIAvailableColumnsTreeTree == null))
                {
                    this.mUIAvailableColumnsTreeTree = new UIAvailableColumnsTreeTree2(this);
                }
                return this.mUIAvailableColumnsTreeTree;
            }
        }
        #endregion
        
        #region Fields
        private UIAvailableColumnsTreeTree2 mUIAvailableColumnsTreeTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAvailableColumnsTreeTree2 : WpfTree
    {
        
        public UIAvailableColumnsTreeTree2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "AvailableColumnsTreeView";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIQuandlSharedModelsDaTreeItem3 UIQuandlSharedModelsDaTreeItem
        {
            get
            {
                if ((this.mUIQuandlSharedModelsDaTreeItem == null))
                {
                    this.mUIQuandlSharedModelsDaTreeItem = new UIQuandlSharedModelsDaTreeItem3(this);
                }
                return this.mUIQuandlSharedModelsDaTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIQuandlSharedModelsDaTreeItem3 mUIQuandlSharedModelsDaTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlSharedModelsDaTreeItem3 : WpfTreeItem
    {
        
        public UIQuandlSharedModelsDaTreeItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Quandl.Shared.Models.Dataset";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIQuandlSharedModelsDaTreeItem21 UIQuandlSharedModelsDaTreeItem2
        {
            get
            {
                if ((this.mUIQuandlSharedModelsDaTreeItem2 == null))
                {
                    this.mUIQuandlSharedModelsDaTreeItem2 = new UIQuandlSharedModelsDaTreeItem21(this);
                }
                return this.mUIQuandlSharedModelsDaTreeItem2;
            }
        }
        #endregion
        
        #region Fields
        private UIQuandlSharedModelsDaTreeItem21 mUIQuandlSharedModelsDaTreeItem2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlSharedModelsDaTreeItem21 : WpfTreeItem
    {
        
        public UIQuandlSharedModelsDaTreeItem21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Quandl.Shared.Models.DataColumn";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "5";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UICloseCheckBox
        {
            get
            {
                if ((this.mUICloseCheckBox == null))
                {
                    this.mUICloseCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUICloseCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Close";
                    this.mUICloseCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseCheckBox.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUICloseCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUICloseCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom5 : WpfCustom
    {
        
        public UIItemCustom5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ColumnSelection";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIAvailableColumnsTreeTree3 UIAvailableColumnsTreeTree
        {
            get
            {
                if ((this.mUIAvailableColumnsTreeTree == null))
                {
                    this.mUIAvailableColumnsTreeTree = new UIAvailableColumnsTreeTree3(this);
                }
                return this.mUIAvailableColumnsTreeTree;
            }
        }
        #endregion
        
        #region Fields
        private UIAvailableColumnsTreeTree3 mUIAvailableColumnsTreeTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAvailableColumnsTreeTree3 : WpfTree
    {
        
        public UIAvailableColumnsTreeTree3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "AvailableColumnsTreeView";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIQuandlSharedModelsDaTreeItem4 UIQuandlSharedModelsDaTreeItem
        {
            get
            {
                if ((this.mUIQuandlSharedModelsDaTreeItem == null))
                {
                    this.mUIQuandlSharedModelsDaTreeItem = new UIQuandlSharedModelsDaTreeItem4(this);
                }
                return this.mUIQuandlSharedModelsDaTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIQuandlSharedModelsDaTreeItem4 mUIQuandlSharedModelsDaTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlSharedModelsDaTreeItem4 : WpfTreeItem
    {
        
        public UIQuandlSharedModelsDaTreeItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Quandl.Shared.Models.Dataset";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIQuandlSharedModelsDaTreeItem31 UIQuandlSharedModelsDaTreeItem3
        {
            get
            {
                if ((this.mUIQuandlSharedModelsDaTreeItem3 == null))
                {
                    this.mUIQuandlSharedModelsDaTreeItem3 = new UIQuandlSharedModelsDaTreeItem31(this);
                }
                return this.mUIQuandlSharedModelsDaTreeItem3;
            }
        }
        #endregion
        
        #region Fields
        private UIQuandlSharedModelsDaTreeItem31 mUIQuandlSharedModelsDaTreeItem3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlSharedModelsDaTreeItem31 : WpfTreeItem
    {
        
        public UIQuandlSharedModelsDaTreeItem31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Quandl.Shared.Models.DataColumn";
            this.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "6";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UIVolumeCheckBox
        {
            get
            {
                if ((this.mUIVolumeCheckBox == null))
                {
                    this.mUIVolumeCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIVolumeCheckBox.SearchProperties[WpfCheckBox.PropertyNames.Name] = "Volume";
                    this.mUIVolumeCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIVolumeCheckBox.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIVolumeCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUIVolumeCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom6 : WpfCustom
    {
        
        public UIItemCustom6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DatasetDatatableSelection";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UILvDatasetsList UILvDatasetsList
        {
            get
            {
                if ((this.mUILvDatasetsList == null))
                {
                    this.mUILvDatasetsList = new UILvDatasetsList(this);
                }
                return this.mUILvDatasetsList;
            }
        }
        
        public UIDatasetsDatatablesLiList UIDatasetsDatatablesLiList
        {
            get
            {
                if ((this.mUIDatasetsDatatablesLiList == null))
                {
                    this.mUIDatasetsDatatablesLiList = new UIDatasetsDatatablesLiList(this);
                }
                return this.mUIDatasetsDatatablesLiList;
            }
        }
        #endregion
        
        #region Fields
        private UILvDatasetsList mUILvDatasetsList;
        
        private UIDatasetsDatatablesLiList mUIDatasetsDatatablesLiList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UILvDatasetsList : WpfList
    {
        
        public UILvDatasetsList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "lvDatasets";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIFacebookIncFBStockPrListItem
        {
            get
            {
                if ((this.mUIFacebookIncFBStockPrListItem == null))
                {
                    this.mUIFacebookIncFBStockPrListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIFacebookIncFBStockPrListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Facebook Inc. (FB) Stock Prices, Dividends and Splits";
                    this.mUIFacebookIncFBStockPrListItem.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIFacebookIncFBStockPrListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIFacebookIncFBStockPrListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDatasetsDatatablesLiList : WpfList
    {
        
        public UIDatasetsDatatablesLiList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "lvDatasetsDatatables";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIDigitalRealtyTrustInListItem
        {
            get
            {
                if ((this.mUIDigitalRealtyTrustInListItem == null))
                {
                    this.mUIDigitalRealtyTrustInListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDigitalRealtyTrustInListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Digital Realty Trust Inc. Redeemable Preferred Stock Series H (DLR_P_H) Stock Pri" +
                        "ces, Dividends and Splits";
                    this.mUIDigitalRealtyTrustInListItem.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIDigitalRealtyTrustInListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIDigitalRealtyTrustInListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIStepTwoPaneCustom : WpfCustom
    {
        
        public UIStepTwoPaneCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DatasetDatatableSelection";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "StepTwoPane";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIDatasetsDatatablesLiList1 UIDatasetsDatatablesLiList
        {
            get
            {
                if ((this.mUIDatasetsDatatablesLiList == null))
                {
                    this.mUIDatasetsDatatablesLiList = new UIDatasetsDatatablesLiList1(this);
                }
                return this.mUIDatasetsDatatablesLiList;
            }
        }
        
        public WpfEdit UIDatabaseCodeBoxEdit
        {
            get
            {
                if ((this.mUIDatabaseCodeBoxEdit == null))
                {
                    this.mUIDatabaseCodeBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIDatabaseCodeBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DatabaseCodeBox";
                    this.mUIDatabaseCodeBoxEdit.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIDatabaseCodeBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIDatasetsDatatablesLiList1 mUIDatasetsDatatablesLiList;
        
        private WpfEdit mUIDatabaseCodeBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDatasetsDatatablesLiList1 : WpfList
    {
        
        public UIDatasetsDatatablesLiList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "lvDatasetsDatatables";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfListItem UIBlackrockMuniYieldCaListItem
        {
            get
            {
                if ((this.mUIBlackrockMuniYieldCaListItem == null))
                {
                    this.mUIBlackrockMuniYieldCaListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIBlackrockMuniYieldCaListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Blackrock MuniYield California Fund Inc. (MYC) Stock Prices, Dividends and Splits" +
                        "";
                    this.mUIBlackrockMuniYieldCaListItem.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIBlackrockMuniYieldCaListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUIBlackrockMuniYieldCaListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIStepThreePaneCustom : WpfCustom
    {
        
        public UIStepThreePaneCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ColumnSelection";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "StepThreePane";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIColumnsTreeViewTree UIColumnsTreeViewTree
        {
            get
            {
                if ((this.mUIColumnsTreeViewTree == null))
                {
                    this.mUIColumnsTreeViewTree = new UIColumnsTreeViewTree(this);
                }
                return this.mUIColumnsTreeViewTree;
            }
        }
        
        public UISelectedColumnsList UISelectedColumnsList
        {
            get
            {
                if ((this.mUISelectedColumnsList == null))
                {
                    this.mUISelectedColumnsList = new UISelectedColumnsList(this);
                }
                return this.mUISelectedColumnsList;
            }
        }
        #endregion
        
        #region Fields
        private UIColumnsTreeViewTree mUIColumnsTreeViewTree;
        
        private UISelectedColumnsList mUISelectedColumnsList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIColumnsTreeViewTree : WpfTree
    {
        
        public UIColumnsTreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "ColumnsTreeView";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIColumnsTreeRootItem UIColumnsTreeRootItem
        {
            get
            {
                if ((this.mUIColumnsTreeRootItem == null))
                {
                    this.mUIColumnsTreeRootItem = new UIColumnsTreeRootItem(this);
                }
                return this.mUIColumnsTreeRootItem;
            }
        }
        #endregion
        
        #region Fields
        private UIColumnsTreeRootItem mUIColumnsTreeRootItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIColumnsTreeRootItem : WpfTreeItem
    {
        
        public UIColumnsTreeRootItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Apple Inc. (AAPL) Stock Prices, Dividends and Splits";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIColumnsTreeListItem1 UIColumnsTreeListItem1
        {
            get
            {
                if ((this.mUIColumnsTreeListItem1 == null))
                {
                    this.mUIColumnsTreeListItem1 = new UIColumnsTreeListItem1(this);
                }
                return this.mUIColumnsTreeListItem1;
            }
        }
        
        public WpfTreeItem UIColumnTreeListtemCollection
        {
            get
            {
                if ((this.mUIColumnTreeListtemCollection == null))
                {
                    this.mUIColumnTreeListtemCollection = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIColumnTreeListtemCollection.SearchProperties.Add(new PropertyExpression(WpfTreeItem.PropertyNames.ClassName, "Uia.TreeViewItem", PropertyExpressionOperator.Contains));
                    this.mUIColumnTreeListtemCollection.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIColumnTreeListtemCollection.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIColumnTreeListtemCollection;
            }
        }
        
        public UIColumnTreeListItem2 UIColumnTreeListItem2
        {
            get
            {
                if ((this.mUIColumnTreeListItem2 == null))
                {
                    this.mUIColumnTreeListItem2 = new UIColumnTreeListItem2(this);
                }
                return this.mUIColumnTreeListItem2;
            }
        }
        #endregion
        
        #region Fields
        private UIColumnsTreeListItem1 mUIColumnsTreeListItem1;
        
        private WpfTreeItem mUIColumnTreeListtemCollection;
        
        private UIColumnTreeListItem2 mUIColumnTreeListItem2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIColumnsTreeListItem1 : WpfTreeItem
    {
        
        public UIColumnsTreeListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Apple Inc. (AAPL) Stock Prices, Dividends and Splits - Open";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UIColumnListItemCheckBox
        {
            get
            {
                if ((this.mUIColumnListItemCheckBox == null))
                {
                    this.mUIColumnListItemCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIColumnListItemCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "Open";
                    this.mUIColumnListItemCheckBox.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIColumnListItemCheckBox.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIColumnListItemCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUIColumnListItemCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIColumnTreeListItem2 : WpfTreeItem
    {
        
        public UIColumnTreeListItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WpfTreeItem.PropertyNames.ClassName, "Uia.TreeViewItem", PropertyExpressionOperator.Contains));
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UIColumnListItemCheckBoxCollection
        {
            get
            {
                if ((this.mUIColumnListItemCheckBoxCollection == null))
                {
                    this.mUIColumnListItemCheckBoxCollection = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIColumnListItemCheckBoxCollection.SearchProperties.Add(new PropertyExpression(WpfCheckBox.PropertyNames.ClassName, "Uia.CheckBox", PropertyExpressionOperator.Contains));
                    this.mUIColumnListItemCheckBoxCollection.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIColumnListItemCheckBoxCollection.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIColumnListItemCheckBoxCollection;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUIColumnListItemCheckBoxCollection;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISelectedColumnsList : WpfList
    {
        
        public UISelectedColumnsList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "SelectedColumns";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfListItem UISelectedColumnListItem
        {
            get
            {
                if ((this.mUISelectedColumnListItem == null))
                {
                    this.mUISelectedColumnListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUISelectedColumnListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Apple Inc. (AAPL) Stock Prices, Dividends and Splits - Open";
                    this.mUISelectedColumnListItem.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUISelectedColumnListItem;
            }
        }
        
        public WpfListItem UISelectedColumnListItems
        {
            get
            {
                if ((this.mUISelectedColumnListItems == null))
                {
                    this.mUISelectedColumnListItems = new WpfListItem(this);
                    #region Search Criteria
                    this.mUISelectedColumnListItems.SearchProperties.Add(new PropertyExpression(WpfListItem.PropertyNames.ClassName, "Uia.ListBoxItem", PropertyExpressionOperator.Contains));
                    this.mUISelectedColumnListItems.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUISelectedColumnListItems;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUISelectedColumnListItem;
        
        private WpfListItem mUISelectedColumnListItems;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlExcelAddincompPane2 : WpfPane
    {
        
        public UIQuandlExcelAddincompPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "stepFrame";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIStepThreePaneCustom1 UIStepThreePaneCustom
        {
            get
            {
                if ((this.mUIStepThreePaneCustom == null))
                {
                    this.mUIStepThreePaneCustom = new UIStepThreePaneCustom1(this);
                }
                return this.mUIStepThreePaneCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIStepThreePaneCustom1 mUIStepThreePaneCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIStepThreePaneCustom1 : WpfCustom
    {
        
        public UIStepThreePaneCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ColumnSelection";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "StepThreePane";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfButton UIAddAllButton
        {
            get
            {
                if ((this.mUIAddAllButton == null))
                {
                    this.mUIAddAllButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAddAllButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ButtonAddAll";
                    this.mUIAddAllButton.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIAddAllButton;
            }
        }
        
        public WpfButton UIRemoveAllButton
        {
            get
            {
                if ((this.mUIRemoveAllButton == null))
                {
                    this.mUIRemoveAllButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRemoveAllButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ButtonRemoveAll";
                    this.mUIRemoveAllButton.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIRemoveAllButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIAddAllButton;
        
        private WpfButton mUIRemoveAllButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom111 : WpfCustom
    {
        
        public UIItemCustom111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TimeSeriesFilters";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfDatePicker UIDateFromFilterDatePicker
        {
            get
            {
                if ((this.mUIDateFromFilterDatePicker == null))
                {
                    this.mUIDateFromFilterDatePicker = new WpfDatePicker(this);
                    #region Search Criteria
                    this.mUIDateFromFilterDatePicker.SearchProperties[WpfDatePicker.PropertyNames.AutomationId] = "DateFromFilter";
                    this.mUIDateFromFilterDatePicker.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIDateFromFilterDatePicker;
            }
        }
        #endregion
        
        #region Fields
        private WpfDatePicker mUIDateFromFilterDatePicker;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlFormulaBuilderWindow1 : WinWindow
    {
        
        public UIQuandlFormulaBuilderWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Data Link Formula Builder";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MsoCommandBar";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIWpfElementHostWindow2 UIWpfElementHostWindow
        {
            get
            {
                if ((this.mUIWpfElementHostWindow == null))
                {
                    this.mUIWpfElementHostWindow = new UIWpfElementHostWindow2(this);
                }
                return this.mUIWpfElementHostWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIWpfElementHostWindow2 mUIWpfElementHostWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfElementHostWindow2 : WinWindow
    {
        
        public UIWpfElementHostWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "WpfElementHost";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIWpfElementHostClient2 UIWpfElementHostClient
        {
            get
            {
                if ((this.mUIWpfElementHostClient == null))
                {
                    this.mUIWpfElementHostClient = new UIWpfElementHostClient2(this);
                }
                return this.mUIWpfElementHostClient;
            }
        }
        #endregion
        
        #region Fields
        private UIWpfElementHostClient2 mUIWpfElementHostClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIWpfElementHostClient2 : WinClient
    {
        
        public UIWpfElementHostClient2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIItemPane2 UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane2(this);
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private UIItemPane2 mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemPane2 : WpfPane
    {
        
        public UIItemPane2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIItemCustom7 UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom7(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public UIItemCustom12 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom12(this);
                }
                return this.mUIItemCustom1;
            }
        }
        
        public UIItemCustom21 UIItemCustom2
        {
            get
            {
                if ((this.mUIItemCustom2 == null))
                {
                    this.mUIItemCustom2 = new UIItemCustom21(this);
                }
                return this.mUIItemCustom2;
            }
        }
        
        public UIStepTwoPaneCustom1 UIStepTwoPaneCustom
        {
            get
            {
                if ((this.mUIStepTwoPaneCustom == null))
                {
                    this.mUIStepTwoPaneCustom = new UIStepTwoPaneCustom1(this);
                }
                return this.mUIStepTwoPaneCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom7 mUIItemCustom;
        
        private UIItemCustom12 mUIItemCustom1;
        
        private UIItemCustom21 mUIItemCustom2;
        
        private UIStepTwoPaneCustom1 mUIStepTwoPaneCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom7 : WpfCustom
    {
        
        public UIItemCustom7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DatabaseSelection";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UITabControlTabList1 UITabControlTabList
        {
            get
            {
                if ((this.mUITabControlTabList == null))
                {
                    this.mUITabControlTabList = new UITabControlTabList1(this);
                }
                return this.mUITabControlTabList;
            }
        }
        
        public UIBrowseDataTree1 UIBrowseDataTree
        {
            get
            {
                if ((this.mUIBrowseDataTree == null))
                {
                    this.mUIBrowseDataTree = new UIBrowseDataTree1(this);
                }
                return this.mUIBrowseDataTree;
            }
        }
        #endregion
        
        #region Fields
        private UITabControlTabList1 mUITabControlTabList;
        
        private UIBrowseDataTree1 mUIBrowseDataTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITabControlTabList1 : WpfTabList
    {
        
        public UITabControlTabList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabList.PropertyNames.AutomationId] = "TabControl";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIAllTabPage1 UIAllTabPage
        {
            get
            {
                if ((this.mUIAllTabPage == null))
                {
                    this.mUIAllTabPage = new UIAllTabPage1(this);
                }
                return this.mUIAllTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UIAllTabPage1 mUIAllTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAllTabPage1 : WpfTabPage
    {
        
        public UIAllTabPage1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "All";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfList UIAllDatabaseListList
        {
            get
            {
                if ((this.mUIAllDatabaseListList == null))
                {
                    this.mUIAllDatabaseListList = new WpfList(this);
                    #region Search Criteria
                    this.mUIAllDatabaseListList.SearchProperties[WpfList.PropertyNames.AutomationId] = "AllDatabaseList";
                    this.mUIAllDatabaseListList.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIAllDatabaseListList;
            }
        }
        #endregion
        
        #region Fields
        private WpfList mUIAllDatabaseListList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBrowseDataTree1 : WpfTree
    {
        
        public UIBrowseDataTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTree.PropertyNames.AutomationId] = "BrowseData";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIItemTreeItem2 UIItemTreeItem
        {
            get
            {
                if ((this.mUIItemTreeItem == null))
                {
                    this.mUIItemTreeItem = new UIItemTreeItem2(this);
                }
                return this.mUIItemTreeItem;
            }
        }
        
        public UIBrowseDatabaseTreeItem UIBrowseDatabaseTreeItem
        {
            get
            {
                if ((this.mUIBrowseDatabaseTreeItem == null))
                {
                    this.mUIBrowseDatabaseTreeItem = new UIBrowseDatabaseTreeItem(this);
                }
                return this.mUIBrowseDatabaseTreeItem;
            }
        }
        
        public WpfTreeItem UIStockDataTreeItem
        {
            get
            {
                if ((this.mUIStockDataTreeItem == null))
                {
                    this.mUIStockDataTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIStockDataTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Stock Data";
                    this.mUIStockDataTreeItem.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIStockDataTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTreeItem2 mUIItemTreeItem;
        
        private UIBrowseDatabaseTreeItem mUIBrowseDatabaseTreeItem;
        
        private WpfTreeItem mUIStockDataTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemTreeItem2 : WpfTreeItem
    {
        
        public UIItemTreeItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIItemTreeItem12 UIItemTreeItem1
        {
            get
            {
                if ((this.mUIItemTreeItem1 == null))
                {
                    this.mUIItemTreeItem1 = new UIItemTreeItem12(this);
                }
                return this.mUIItemTreeItem1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTreeItem12 mUIItemTreeItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemTreeItem12 : WpfTreeItem
    {
        
        public UIItemTreeItem12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem UIItemTreeItem3
        {
            get
            {
                if ((this.mUIItemTreeItem3 == null))
                {
                    this.mUIItemTreeItem3 = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIItemTreeItem3.SearchProperties[WpfTreeItem.PropertyNames.Instance] = "13";
                    this.mUIItemTreeItem3.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIItemTreeItem3.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIItemTreeItem3;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mUIItemTreeItem3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBrowseDatabaseTreeItem : WpfTreeItem
    {
        
        public UIBrowseDatabaseTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Commodity Data";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIAgricultureTreeItem1 UIAgricultureTreeItem
        {
            get
            {
                if ((this.mUIAgricultureTreeItem == null))
                {
                    this.mUIAgricultureTreeItem = new UIAgricultureTreeItem1(this);
                }
                return this.mUIAgricultureTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIAgricultureTreeItem1 mUIAgricultureTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAgricultureTreeItem1 : WpfTreeItem
    {
        
        public UIAgricultureTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Agriculture";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfTreeItem UIAgricultureFuturesOpTreeItem
        {
            get
            {
                if ((this.mUIAgricultureFuturesOpTreeItem == null))
                {
                    this.mUIAgricultureFuturesOpTreeItem = new WpfTreeItem(this);
                    #region Search Criteria
                    this.mUIAgricultureFuturesOpTreeItem.SearchProperties[WpfTreeItem.PropertyNames.Name] = "Agriculture Futures Options";
                    this.mUIAgricultureFuturesOpTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAgricultureFuturesOpTreeItem.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIAgricultureFuturesOpTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfTreeItem mUIAgricultureFuturesOpTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom12 : WpfCustom
    {
        
        public UIItemCustom12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.WizardGuide";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIQuandlExcelAddincompPane3 UIQuandlExcelAddincompPane
        {
            get
            {
                if ((this.mUIQuandlExcelAddincompPane == null))
                {
                    this.mUIQuandlExcelAddincompPane = new UIQuandlExcelAddincompPane3(this);
                }
                return this.mUIQuandlExcelAddincompPane;
            }
        }
        #endregion
        
        #region Fields
        private UIQuandlExcelAddincompPane3 mUIQuandlExcelAddincompPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIQuandlExcelAddincompPane3 : WpfPane
    {
        
        public UIQuandlExcelAddincompPane3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.Frame";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "stepFrame";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfList UILvDatasetsList
        {
            get
            {
                if ((this.mUILvDatasetsList == null))
                {
                    this.mUILvDatasetsList = new WpfList(this);
                    #region Search Criteria
                    this.mUILvDatasetsList.SearchProperties[WpfList.PropertyNames.AutomationId] = "lvDatasets";
                    this.mUILvDatasetsList.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUILvDatasetsList;
            }
        }
        
        public WpfEdit UITxtFilterResultsEdit
        {
            get
            {
                if ((this.mUITxtFilterResultsEdit == null))
                {
                    this.mUITxtFilterResultsEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtFilterResultsEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtFilterResults";
                    this.mUITxtFilterResultsEdit.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUITxtFilterResultsEdit;
            }
        }
        
        public WpfDatePicker UIDateToFilterDatePicker
        {
            get
            {
                if ((this.mUIDateToFilterDatePicker == null))
                {
                    this.mUIDateToFilterDatePicker = new WpfDatePicker(this);
                    #region Search Criteria
                    this.mUIDateToFilterDatePicker.SearchProperties[WpfDatePicker.PropertyNames.AutomationId] = "DateToFilter";
                    this.mUIDateToFilterDatePicker.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIDateToFilterDatePicker;
            }
        }
        #endregion
        
        #region Fields
        private WpfList mUILvDatasetsList;
        
        private WpfEdit mUITxtFilterResultsEdit;
        
        private WpfDatePicker mUIDateToFilterDatePicker;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemCustom21 : WpfCustom
    {
        
        public UIItemCustom21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DatasetDatatableSelection";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIDatasetsDatatablesPane UIDatasetsDatatablesPane
        {
            get
            {
                if ((this.mUIDatasetsDatatablesPane == null))
                {
                    this.mUIDatasetsDatatablesPane = new UIDatasetsDatatablesPane(this);
                }
                return this.mUIDatasetsDatatablesPane;
            }
        }
        
        public UIDatasetsDatatablesPane1 UIDatasetsDatatablesPane1
        {
            get
            {
                if ((this.mUIDatasetsDatatablesPane1 == null))
                {
                    this.mUIDatasetsDatatablesPane1 = new UIDatasetsDatatablesPane1(this);
                }
                return this.mUIDatasetsDatatablesPane1;
            }
        }
        #endregion
        
        #region Fields
        private UIDatasetsDatatablesPane mUIDatasetsDatatablesPane;
        
        private UIDatasetsDatatablesPane1 mUIDatasetsDatatablesPane1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDatasetsDatatablesPane : WpfPane
    {
        
        public UIDatasetsDatatablesPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.Name] = "DatasetsDatatables";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfList UIDatasetsDatatblesLisList
        {
            get
            {
                if ((this.mUIDatasetsDatatblesLisList == null))
                {
                    this.mUIDatasetsDatatblesLisList = new WpfList(this);
                    #region Search Criteria
                    this.mUIDatasetsDatatblesLisList.SearchProperties[WpfList.PropertyNames.AutomationId] = "lvDatasets";
                    this.mUIDatasetsDatatblesLisList.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIDatasetsDatatblesLisList;
            }
        }
        #endregion
        
        #region Fields
        private WpfList mUIDatasetsDatatblesLisList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDatasetsDatatablesPane1 : WpfPane
    {
        
        public UIDatasetsDatatablesPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "DatasetsDatatablesScrollViewer";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfList UIDatasetsDatatablesLiList
        {
            get
            {
                if ((this.mUIDatasetsDatatablesLiList == null))
                {
                    this.mUIDatasetsDatatablesLiList = new WpfList(this);
                    #region Search Criteria
                    this.mUIDatasetsDatatablesLiList.SearchProperties[WpfList.PropertyNames.AutomationId] = "lvDatasetsDatatables";
                    this.mUIDatasetsDatatablesLiList.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIDatasetsDatatablesLiList;
            }
        }
        #endregion
        
        #region Fields
        private WpfList mUIDatasetsDatatablesLiList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIStepTwoPaneCustom1 : WpfCustom
    {
        
        public UIStepTwoPaneCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DatasetDatatableSelection";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "StepTwoPane";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public UIDatasetsDatatablesScPane UIDatasetsDatatablesScPane
        {
            get
            {
                if ((this.mUIDatasetsDatatablesScPane == null))
                {
                    this.mUIDatasetsDatatablesScPane = new UIDatasetsDatatablesScPane(this);
                }
                return this.mUIDatasetsDatatablesScPane;
            }
        }
        #endregion
        
        #region Fields
        private UIDatasetsDatatablesScPane mUIDatasetsDatatablesScPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDatasetsDatatablesScPane : WpfPane
    {
        
        public UIDatasetsDatatablesScPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "DatasetsDatatablesScrollViewer";
            this.WindowTitles.Add("Data Link Formula Builder");
            #endregion
        }
        
        #region Properties
        public WpfList UIDatasetsDatatablesLiList
        {
            get
            {
                if ((this.mUIDatasetsDatatablesLiList == null))
                {
                    this.mUIDatasetsDatatablesLiList = new WpfList(this);
                    #region Search Criteria
                    this.mUIDatasetsDatatablesLiList.SearchProperties[WpfList.PropertyNames.AutomationId] = "lvDatasetsDatatables";
                    this.mUIDatasetsDatatablesLiList.WindowTitles.Add("Data Link Formula Builder");
                    #endregion
                }
                return this.mUIDatasetsDatatablesLiList;
            }
        }
        #endregion
        
        #region Fields
        private WpfList mUIDatasetsDatatablesLiList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public WinToolBar UIQuandlFormulaBuilderToolBar
        {
            get
            {
                if ((this.mUIQuandlFormulaBuilderToolBar == null))
                {
                    this.mUIQuandlFormulaBuilderToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIQuandlFormulaBuilderToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "Data Link Formula Builder";
                    #endregion
                }
                return this.mUIQuandlFormulaBuilderToolBar;
            }
        }
        #endregion
        
        #region Fields
        private WinToolBar mUIQuandlFormulaBuilderToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIBook2ExcelWindow : WinWindow
    {
        
        public UIBook2ExcelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Book2 - Excel";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "XLMAIN";
            this.WindowTitles.Add("Book2 - Excel");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Ribbon";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NetUIHWND";
            this.WindowTitles.Add("Book2 - Excel");
            #endregion
        }
        
        #region Properties
        public UIItemToolBar UIItemToolBar
        {
            get
            {
                if ((this.mUIItemToolBar == null))
                {
                    this.mUIItemToolBar = new UIItemToolBar(this);
                }
                return this.mUIItemToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemToolBar mUIItemToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemToolBar : WinToolBar
    {
        
        public UIItemToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Book2 - Excel");
            #endregion
        }
        
        #region Properties
        public WinButton UIGetDataButton
        {
            get
            {
                if ((this.mUIGetDataButton == null))
                {
                    this.mUIGetDataButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIGetDataButton.SearchProperties[WinButton.PropertyNames.Name] = "Get Data";
                    this.mUIGetDataButton.WindowTitles.Add("Book2 - Excel");
                    #endregion
                }
                return this.mUIGetDataButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIGetDataButton;
        #endregion
    }
}
